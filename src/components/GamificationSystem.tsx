import React, { useState } from 'react';
import { 
  Trophy, Star, Target, TrendingUp, Award, 
  Zap, Crown, Gift, TreePine, Users, Heart
} from 'lucide-react';

interface GamificationSystemProps {
  user: any;
}

const GamificationSystem: React.FC<GamificationSystemProps> = ({ user }) => {
  const [selectedTab, setSelectedTab] = useState('overview');

  const badges = [
    { id: 1, name: 'рж╕рж╣рж╛ржпрж╝ржХ', icon: 'ЁЯдЭ', color: 'bg-blue-500', earned: true, description: 'ржкрзНрж░ржержо рж╕рж╛рж╣рж╛ржпрзНржп ржирж┐ржпрж╝рзЗржЫрзЗржи' },
    { id: 2, name: 'рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА', icon: 'ЁЯУЪ', color: 'bg-green-500', earned: true, description: 'рзлржЯрж┐ ржХрзЛрж░рзНрж╕ рж╕ржорзНржкржирзНржи' },
    { id: 3, name: 'ржХржорж┐ржЙржирж┐ржЯрж┐ рж╕ржжрж╕рзНржп', icon: 'ЁЯСе', color: 'bg-purple-500', earned: true, description: 'ржХржорж┐ржЙржирж┐ржЯрж┐рждрзЗ рж╕ржХрзНрж░рж┐ржпрж╝' },
    { id: 4, name: 'ржорзЗржирзНржЯрж░', icon: 'ЁЯОУ', color: 'bg-yellow-500', earned: false, description: 'ржЕржирзНржпржжрзЗрж░ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзБржи' },
    { id: 5, name: 'ржирзЗрждрж╛', icon: 'ЁЯСС', color: 'bg-red-500', earned: false, description: 'рж▓рж┐ржбрж╛рж░ржмрзЛрж░рзНржбрзЗ ржЯржк рззрзж' },
    { id: 6, name: 'ржЪрзНржпрж╛ржорзНржкрж┐ржпрж╝ржи', icon: 'ЁЯПЖ', color: 'bg-indigo-500', earned: false, description: 'рж╕рж░рзНржмрзЛржЪрзНржЪ ржкржпрж╝рзЗржирзНржЯ ржЕрж░рзНржЬржи' },
  ];

  const impactTree = {
    level: 5,
    branches: [
      { name: 'рж╢рж┐ржХрзНрж╖рж╛ рж╢рж╛ржЦрж╛', progress: 80, color: 'text-green-600', icon: 'ЁЯМ┐' },
      { name: 'рж╕рзНржмрж╛рж╕рзНржерзНржп рж╢рж╛ржЦрж╛', progress: 65, color: 'text-blue-600', icon: 'ЁЯМ▒' },
      { name: 'ржирж┐рж░рж╛ржкрждрзНрждрж╛ рж╢рж╛ржЦрж╛', progress: 45, color: 'text-red-600', icon: 'ЁЯНГ' },
      { name: 'ржХржорж┐ржЙржирж┐ржЯрж┐ рж╢рж╛ржЦрж╛', progress: 90, color: 'text-purple-600', icon: 'ЁЯМ│' },
    ]
  };

  const leaderboard = [
    { rank: 1, name: 'рж╕рж╛рж░рж╛ ржЦрж╛ржи', points: 2450, avatar: 'ЁЯСй', badge: 'ЁЯПЖ' },
    { rank: 2, name: 'рж░рж╛рж╣рзБрж▓ ржЖрж╣ржорзЗржж', points: 1250, avatar: 'ЁЯСи', badge: 'ЁЯеИ', isCurrentUser: true },
    { rank: 3, name: 'ржлрж╛рждрж┐ржорж╛ ржмрзЗржЧржо', points: 1180, avatar: 'ЁЯСй', badge: 'ЁЯеЙ' },
    { rank: 4, name: 'ржХрж░рж┐ржо ржЙржжрзНржжрж┐ржи', points: 980, avatar: 'ЁЯСи', badge: 'тнР' },
    { rank: 5, name: 'ржирж╛ржжрж┐ржпрж╝рж╛ рж░рж╣ржорж╛ржи', points: 875, avatar: 'ЁЯСй', badge: 'тнР' },
  ];

  const challenges = [
    {
      id: 1,
      title: 'рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬ',
      description: 'ржПржЗ рж╕ржкрзНрждрж╛рж╣рзЗ рзлржЯрж┐ ржирждрзБржи ржжржХрзНрж╖рждрж╛ рж╢рж┐ржЦрзБржи',
      progress: 60,
      reward: '100 ржкржпрж╝рзЗржирзНржЯ + ржмрж┐рж╢рзЗрж╖ ржмрзНржпрж╛ржЬ',
      timeLeft: 'рзй ржжрж┐ржи ржмрж╛ржХрж┐',
      difficulty: 'ржоржзрзНржпржо'
    },
    {
      id: 2,
      title: 'ржХржорж┐ржЙржирж┐ржЯрж┐ рж╣рж┐рж░рзЛ',
      description: 'рззрзж ржЬржи ржирждрзБржи рж╕ржжрж╕рзНржпржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзБржи',
      progress: 30,
      reward: '200 ржкржпрж╝рзЗржирзНржЯ + ржорзЗржирзНржЯрж░ ржмрзНржпрж╛ржЬ',
      timeLeft: 'рззрзж ржжрж┐ржи ржмрж╛ржХрж┐',
      difficulty: 'ржХржарж┐ржи'
    },
    {
      id: 3,
      title: 'рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕ржЪрзЗрждржирждрж╛',
      description: 'рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрж┐рж╖ржпрж╝ржХ рзйржЯрж┐ ржХрзЛрж░рзНрж╕ рж╕ржорзНржкржирзНржи ржХрж░рзБржи',
      progress: 100,
      reward: 'рзлрзж ржкржпрж╝рзЗржирзНржЯ',
      timeLeft: 'рж╕ржорзНржкржирзНржи!',
      difficulty: 'рж╕рж╣ржЬ',
      completed: true
    }
  ];

  const certificates = [
    { name: 'ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ', date: 'рзирзжрзирзк-рзжрзл-рззрзл', issuer: 'ShikkhaBondhu' },
    { name: 'ржорж╛ржирж╕рж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рж╣рж╛ржпрж╝ржХ', date: 'рзирзжрзирзк-рзжрзк-рзирзи', issuer: 'ShikkhaBondhu' },
    { name: 'ржХржорж┐ржЙржирж┐ржЯрж┐ рж▓рж┐ржбрж╛рж░', date: 'рзирзжрзирзк-рзжрзй-рззрзж', issuer: 'ShikkhaBondhu' },
  ];

  return (
    <section className="py-16 bg-gradient-to-br from-indigo-50 to-purple-50">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4 flex items-center justify-center">
            <Trophy className="w-10 h-10 text-yellow-500 mr-3" />
            ржЧрзЗржорж┐ржлрж┐ржХрзЗрж╢ржи рж╕рж┐рж╕рзНржЯрзЗржо
          </h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            ржЖржкржирж╛рж░ ржЕржЧрзНрж░ржЧрждрж┐ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рзБржи, ржмрзНржпрж╛ржЬ ржЕрж░рзНржЬржи ржХрж░рзБржи ржПржмржВ ржХржорж┐ржЙржирж┐ржЯрж┐рждрзЗ ржЖржкржирж╛рж░ ржкрзНрж░ржнрж╛ржм ржжрзЗржЦрзБржи
          </p>
        </div>

        {/* Tabs */}
        <div className="flex flex-wrap justify-center mb-8 border-b border-gray-200">
          {[
            { id: 'overview', label: 'ржУржнрж╛рж░ржнрж┐ржЙ', icon: Star },
            { id: 'badges', label: 'ржмрзНржпрж╛ржЬ', icon: Award },
            { id: 'impact', label: 'ржкрзНрж░ржнрж╛ржм ржЯрзНрж░рж┐', icon: TreePine },
            { id: 'leaderboard', label: 'рж▓рж┐ржбрж╛рж░ржмрзЛрж░рзНржб', icon: Crown },
            { id: 'challenges', label: 'ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬ', icon: Target },
            { id: 'certificates', label: 'рж╕рж╛рж░рзНржЯрж┐ржлрж┐ржХрзЗржЯ', icon: Gift }
          ].map((tab) => {
            const IconComponent = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setSelectedTab(tab.id)}
                className={`flex items-center space-x-2 px-6 py-3 border-b-2 font-medium transition-colors ${
                  selectedTab === tab.id
                    ? 'border-indigo-600 text-indigo-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                <IconComponent className="w-5 h-5" />
                <span className="font-bangla">{tab.label}</span>
              </button>
            );
          })}
        </div>

        {/* Content */}
        <div className="max-w-6xl mx-auto">
          {selectedTab === 'overview' && (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {/* Current Level */}
              <div className="bg-white rounded-2xl shadow-lg p-6 text-center">
                <div className="bg-gradient-to-r from-indigo-500 to-purple-500 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Star className="w-10 h-10 text-white" />
                </div>
                <h3 className="text-2xl font-bold text-gray-900 mb-2">Level {user.level}</h3>
                <p className="text-gray-600 font-bangla mb-4">ржмрж░рзНрждржорж╛ржи рж▓рзЗржнрзЗрж▓</p>
                <div className="bg-gray-200 rounded-full h-3 mb-2">
                  <div 
                    className="bg-gradient-to-r from-indigo-500 to-purple-500 h-3 rounded-full"
                    style={{ width: `${(user.points % 300) / 300 * 100}%` }}
                  ></div>
                </div>
                <p className="text-sm text-gray-500 font-bangla">
                  ржкрж░ржмрж░рзНрждрзА рж▓рзЗржнрзЗрж▓рзЗрж░ ржЬржирзНржп {300 - (user.points % 300)} ржкржпрж╝рзЗржирзНржЯ ржмрж╛ржХрж┐
                </p>
              </div>

              {/* Total Points */}
              <div className="bg-white rounded-2xl shadow-lg p-6 text-center">
                <div className="bg-gradient-to-r from-yellow-500 to-orange-500 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Zap className="w-10 h-10 text-white" />
                </div>
                <h3 className="text-2xl font-bold text-gray-900 mb-2">{user.points}</h3>
                <p className="text-gray-600 font-bangla mb-4">ржорзЛржЯ ржкржпрж╝рзЗржирзНржЯ</p>
                <p className="text-sm text-green-600 font-bangla">
                  +25 ржкржпрж╝рзЗржирзНржЯ ржЖржЬ ржЕрж░рзНржЬрж┐ржд
                </p>
              </div>

              {/* Impact Score */}
              <div className="bg-white rounded-2xl shadow-lg p-6 text-center">
                <div className="bg-gradient-to-r from-green-500 to-teal-500 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-4">
                  <TrendingUp className="w-10 h-10 text-white" />
                </div>
                <h3 className="text-2xl font-bold text-gray-900 mb-2">{user.impactScore}%</h3>
                <p className="text-gray-600 font-bangla mb-4">ржкрзНрж░ржнрж╛ржм рж╕рзНржХрзЛрж░</p>
                <p className="text-sm text-blue-600 font-bangla">
                  ржЧржд рж╕ржкрзНрждрж╛рж╣рзЗрж░ ржЪрзЗржпрж╝рзЗ +5% ржмрзЗрж╢рж┐
                </p>
              </div>
            </div>
          )}

          {selectedTab === 'badges' && (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {badges.map((badge) => (
                <div 
                  key={badge.id}
                  className={`bg-white rounded-2xl shadow-lg p-6 text-center transition-all ${
                    badge.earned ? 'ring-2 ring-green-200' : 'opacity-60'
                  }`}
                >
                  <div className={`w-20 h-20 ${badge.color} rounded-full flex items-center justify-center mx-auto mb-4 text-3xl`}>
                    {badge.icon}
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-2 font-bangla">{badge.name}</h3>
                  <p className="text-gray-600 text-sm font-bangla mb-4">{badge.description}</p>
                  {badge.earned ? (
                    <div className="bg-green-100 text-green-800 px-4 py-2 rounded-full text-sm font-bangla">
                      ржЕрж░рзНржЬрж┐ржд тЬУ
                    </div>
                  ) : (
                    <div className="bg-gray-100 text-gray-600 px-4 py-2 rounded-full text-sm font-bangla">
                      ржЕрж░рзНржЬржи ржХрж░рзБржи
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}

          {selectedTab === 'impact' && (
            <div className="bg-white rounded-2xl shadow-lg p-8">
              <div className="text-center mb-8">
                <h3 className="text-2xl font-bold text-gray-900 mb-4 font-bangla">ржЖржкржирж╛рж░ ржкрзНрж░ржнрж╛ржм ржЯрзНрж░рж┐</h3>
                <p className="text-gray-600 font-bangla">
                  ржЖржкржирж╛рж░ ржЕржмржжрж╛ржи ржХржорж┐ржЙржирж┐ржЯрж┐рждрзЗ ржПржХржЯрж┐ ржЧрж╛ржЫрзЗрж░ ржорждрзЛ ржмрзЗржбрж╝рзЗ ржЙржаржЫрзЗ
                </p>
              </div>

              <div className="flex justify-center mb-8">
                <div className="relative">
                  {/* Tree Trunk */}
                  <div className="w-16 h-32 bg-gradient-to-t from-amber-800 to-amber-600 rounded-t-lg mx-auto"></div>
                  
                  {/* Tree Crown */}
                  <div className="relative -mt-16">
                    <div className="w-32 h-32 bg-gradient-to-br from-green-400 to-green-600 rounded-full mx-auto flex items-center justify-center">
                      <TreePine className="w-16 h-16 text-white" />
                    </div>
                    
                    {/* Level indicator */}
                    <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-full w-12 h-12 flex items-center justify-center shadow-lg">
                      <span className="font-bold text-green-600">{impactTree.level}</span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                {impactTree.branches.map((branch, index) => (
                  <div key={index} className="bg-gray-50 rounded-xl p-6">
                    <div className="flex items-center space-x-3 mb-4">
                      <span className="text-2xl">{branch.icon}</span>
                      <h4 className="font-bold text-gray-900 font-bangla">{branch.name}</h4>
                    </div>
                    <div className="bg-gray-200 rounded-full h-3 mb-2">
                      <div 
                        className={`h-3 rounded-full bg-gradient-to-r from-green-400 to-green-600`}
                        style={{ width: `${branch.progress}%` }}
                      ></div>
                    </div>
                    <p className="text-sm text-gray-600 font-bangla">{branch.progress}% рж╕ржорзНржкржирзНржи</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {selectedTab === 'leaderboard' && (
            <div className="bg-white rounded-2xl shadow-lg p-8">
              <h3 className="text-2xl font-bold text-gray-900 mb-6 text-center font-bangla">
                рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ рж▓рж┐ржбрж╛рж░ржмрзЛрж░рзНржб
              </h3>
              <div className="space-y-4">
                {leaderboard.map((user, index) => (
                  <div 
                    key={index}
                    className={`flex items-center space-x-4 p-4 rounded-xl transition-all ${
                      user.isCurrentUser 
                        ? 'bg-gradient-to-r from-indigo-50 to-purple-50 ring-2 ring-indigo-200' 
                        : 'bg-gray-50 hover:bg-gray-100'
                    }`}
                  >
                    <div className="text-2xl font-bold text-gray-600 w-8">#{user.rank}</div>
                    <div className="text-3xl">{user.avatar}</div>
                    <div className="flex-1">
                      <div className={`font-bold font-bangla ${user.isCurrentUser ? 'text-indigo-700' : 'text-gray-900'}`}>
                        {user.name} {user.isCurrentUser && '(ржЖржкржирж┐)'}
                      </div>
                      <div className="text-sm text-gray-600">{user.points} ржкржпрж╝рзЗржирзНржЯ</div>
                    </div>
                    <div className="text-2xl">{user.badge}</div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {selectedTab === 'challenges' && (
            <div className="space-y-6">
              {challenges.map((challenge) => (
                <div key={challenge.id} className="bg-white rounded-2xl shadow-lg p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="text-xl font-bold text-gray-900 font-bangla">{challenge.title}</h3>
                      <p className="text-gray-600 font-bangla">{challenge.description}</p>
                    </div>
                    <div className={`px-3 py-1 rounded-full text-sm font-bangla ${
                      challenge.difficulty === 'рж╕рж╣ржЬ' ? 'bg-green-100 text-green-800' :
                      challenge.difficulty === 'ржоржзрзНржпржо' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {challenge.difficulty}
                    </div>
                  </div>

                  <div className="mb-4">
                    <div className="flex justify-between text-sm mb-2">
                      <span className="font-bangla">ржЕржЧрзНрж░ржЧрждрж┐</span>
                      <span>{challenge.progress}%</span>
                    </div>
                    <div className="bg-gray-200 rounded-full h-3">
                      <div 
                        className={`h-3 rounded-full ${
                          challenge.completed 
                            ? 'bg-gradient-to-r from-green-400 to-green-600' 
                            : 'bg-gradient-to-r from-indigo-400 to-purple-600'
                        }`}
                        style={{ width: `${challenge.progress}%` }}
                      ></div>
                    </div>
                  </div>

                  <div className="flex justify-between items-center">
                    <div>
                      <div className="text-sm text-gray-600 font-bangla">ржкрзБрж░рж╕рзНржХрж╛рж░: {challenge.reward}</div>
                      <div className="text-sm text-gray-500 font-bangla">{challenge.timeLeft}</div>
                    </div>
                    {challenge.completed ? (
                      <div className="bg-green-100 text-green-800 px-4 py-2 rounded-lg font-bangla">
                        рж╕ржорзНржкржирзНржи тЬУ
                      </div>
                    ) : (
                      <button className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors font-bangla">
                        ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрж╛ржи
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}

          {selectedTab === 'certificates' && (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {certificates.map((cert, index) => (
                <div key={index} className="bg-white rounded-2xl shadow-lg p-6 border-l-4 border-indigo-500">
                  <div className="flex items-center space-x-3 mb-4">
                    <Gift className="w-8 h-8 text-indigo-600" />
                    <div>
                      <h3 className="font-bold text-gray-900 font-bangla">{cert.name}</h3>
                      <p className="text-sm text-gray-600">{cert.issuer}</p>
                    </div>
                  </div>
                  <p className="text-sm text-gray-500 font-bangla mb-4">
                    ржЕрж░рзНржЬржирзЗрж░ рждрж╛рж░рж┐ржЦ: {new Date(cert.date).toLocaleDateString('bn-BD')}
                  </p>
                  <button className="w-full bg-indigo-100 text-indigo-700 py-2 px-4 rounded-lg hover:bg-indigo-200 transition-colors font-bangla">
                    рж╕рж╛рж░рзНржЯрж┐ржлрж┐ржХрзЗржЯ ржбрж╛ржЙржирж▓рзЛржб
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </section>
  );
};

export default GamificationSystem;